Extended controls library
=========================

Although OpenDSS has numerous control implementations in its internal equipment library (e.g. inverter controller, storage controller), these controller implementations are limited to a few control modes and may not mimic the behavior of the actual system we are modeling. For example, The OpenDSS storage controller is not capable of operating in ’capacity firming’ or ’base loading’ mode that many utility scale storage systems use. To facilitate implementation of new control modes and ensure that these controls converge to a steady state solution at each time step, an iterative convergence algorithm has been implemented within the PyDSS architecture. The convergence loop uses the steepest gradient descent with Heavy Ball optimization method to efficiently converge to a steady state solution. Heavy Ball optimization is a two step iterative method that uses the state of the previous iteration to maintain momentum in the same direction. The momentum term 

.. math:: 

($x_{k}^{t,n} - x_{k-1}^{t,n}$) 

( helps mitigate zigzag trajectories in iterative descent algorithms, thus enabling faster convergence rates. The transition equation for each controller can be formulated as:

.. math:: 

	x_{k+1}^{t,n} = x_{k}^{t,n} - \alpha^n . \bigtriangledown f(x_{k}^{t,n}) + \beta^n . (x_{k}^{t,n} - x_{k-1}^{t,n})

Each new controller implementation is a pyController object within PyDSS and controls one or more OpenDSS elements. The architecture allows users to implement there own controllers and add them to the simulation environment with minimal coding effort. Figure below presents a flow chart for a simulation run in PyDSS.

.. figure::  _static/Layout.png
   :align:   center
   

   
Users are able to extend current plotting capabilites by following the tutorial here

.. toctree::
   :maxdepth: 2 
  
   Creating custom dynamic plots


